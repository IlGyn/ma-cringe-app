import streamlit as st
import json
from datetime import datetime
from app.config import Config

def render_sidebar(base_url, model, max_context, max_tokens, temperature, top_p, top_k, uploaded_files,
                  qdrant_manager, encoder_manager, file_processor, validator):
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        base_url = st.text_input("Ollama URL", Config.OLLAMA_URL)
        model = st.text_input("–ú–æ–¥–µ–ª—å", Config.DEFAULT_LLM_MODEL)
        max_context = st.slider("–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞", 2, 20, 6)
        embedder = st.text_input("Ollama embedding model", Config.OLLAMA_EMBED_MODEL)
        max_tokens = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞", 50, 1000, 200)
        temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.0, 1.5, 0.3)
        top_p = st.slider("Top-p", 0.1, 1.0, 0.8)
        top_k = st.slider("Top-k", 1, 100, 40)

        if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —ç–Ω–∫–æ–¥–µ—Ä"):
            try:
                # –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ None
                encoder_manager.reinitialize(
                    provider="ollama", 
                    ollama_model=str(embedder)  # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
                )
                
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é Qdrant
                qdrant_manager.init_collection(encoder_manager)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
                st.session_state.encoder = encoder_manager.get_encoder()
                st.success(f"–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ Ollama: {embedder}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —ç–Ω–∫–æ–¥–µ—Ä–∞: {e}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        supported_formats = ["txt", "pdf", "docx", "csv"]
        try:
            from pptx import Presentation
            supported_formats.append("pptx")
        except ImportError:
            pass
        try:
            import openpyxl
            supported_formats.append("xlsx")
        except ImportError:
            pass
            
        uploaded_files = st.file_uploader(
            "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã", 
            type=supported_formats, 
            accept_multiple_files=True
        )
        
        st.markdown("---")
        if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞"):
            if st.session_state.messages:
                chat_data = {
                    "exported_at": datetime.now().isoformat(),
                    "messages": st.session_state.messages,
                    "stats": st.session_state.stats
                }
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                    data=json.dumps(chat_data, ensure_ascii=False, indent=2),
                    file_name=f"chat_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json"
                )
            else:
                st.info("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")

        uploaded_chat = st.file_uploader("üì§ –ò–º–ø–æ—Ä—Ç —á–∞—Ç–∞", type=["json"])
        if uploaded_chat:
            try:
                chat_data = json.load(uploaded_chat)
                st.session_state.messages = chat_data.get("messages", [])
                if "stats" in chat_data:
                    st.session_state.stats = chat_data["stats"]
                st.success("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                st.rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        
        if st.button("üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
            st.session_state.messages = []
            try:
                # –£–ë–ï–î–ò–¢–ï–°–¨ –ß–¢–û –ü–ï–†–ï–î–ê–ï–¢–°–Ø encoder_manager, –∞ –Ω–µ encoder
                qdrant_manager.clear_collection(encoder_manager)  # <-- –¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å encoder_manager
                if "context_cache" in st.session_state:
                    st.session_state.context_cache.clear()
                if hasattr(encoder_manager, 'cache'):
                    encoder_manager.cache.clear()
                st.session_state.stats = {
                    "messages_sent": 0,
                    "files_processed": 0,
                    "chunks_saved": 0
                }
                st.success("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞")
                import logging
                logging.info("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Qdrant: {e}")
                import logging
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Qdrant: {e}")
            st.rerun()

        st.markdown("---")
        if st.button("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"):
            try:
                file_messages = []
                all_messages = qdrant_manager.load_messages(limit=100)
                for msg in all_messages:
                    if msg.get('role') == 'file':
                        file_messages.append(msg)
                
                if file_messages:
                    st.write(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(set(msg.get('time', '') for msg in file_messages))}")
                    files_by_time = {}
                    for msg in file_messages:
                        time_key = msg.get('time', 'unknown')
                        if time_key not in files_by_time:
                            files_by_time[time_key] = []
                        files_by_time[time_key].append(msg)
                    
                    for time_key, chunks in files_by_time.items():
                        with st.expander(f"–§–∞–π–ª –æ—Ç {time_key} ({len(chunks)} —á–∞–Ω–∫–æ–≤)"):
                            if chunks:
                                st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:", chunks[0].get('content', '')[:500] + "...", height=100, key=f"file_{time_key}")
                else:
                    st.info("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")

        st.markdown("---")
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.write(f"–°–æ–æ–±—â–µ–Ω–∏–π: {st.session_state.stats.get('messages_sent', 0)}")
        st.write(f"–§–∞–π–ª–æ–≤: {st.session_state.stats.get('files_processed', 0)}")
        st.write(f"–ß–∞–Ω–∫–æ–≤: {st.session_state.stats.get('chunks_saved', 0)}")
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        if hasattr(encoder_manager, 'cache'):
            cache_stats = encoder_manager.cache.get_stats()
            st.write(f"–ö—ç—à —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {cache_stats['size']}/{cache_stats['max_size']} ({cache_stats['usage_percent']:.1f}%)")

    return base_url, model, max_context, max_tokens, temperature, top_p, top_k, uploaded_files